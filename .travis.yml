sudo: required
# We need the systemd for the kubeadm and it's default from 16.04+
dist: xenial

language: go

go:
  - 1.13

env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config

before_script:
  # Download kubectl, which is a requirement for using minikube.
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
  # Download minikube.
  - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.35.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  - mkdir -p $HOME/.kube $HOME/.minikube
  - touch $KUBECONFIG
  - sudo minikube start --vm-driver=none --kubernetes-version=v1.13.0 -p netkat-test
  - "sudo chown -R travis: /home/travis/.minikube/"
  - sudo minikube -p netkat-test addons enable ingress
  - kubectl cluster-info
  # Verify kube-addon-manager.
  # kube-addon-manager is responsible for managing other kubernetes components, such as kube-dns, dashboard, storage-provisioner..
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 5;echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; done
  # Wait for kube-dns to be ready.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 5;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get pods -n kube-system -lapp.kubernetes.io/name=nginx-ingress-controller -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 5;echo "waiting for nginx-ingress-controller to be available"; kubectl get pods -n kube-system; done
  - kubectl run web --image=gcr.io/google-samples/hello-app:1.0 --port=8080
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get pods -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 5;echo "waiting for web deployment to be available"; kubectl get pods -n kube-system; done
  - kubectl expose deployment web --target-port=8080 --type=NodePort
  - kubectl apply -f test/ingress.yaml
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.loadBalancer.ingress[*]}{"ipAddress"}={@.ip};{end}{end}'; until kubectl get ingress -o jsonpath="$JSONPATH" 2>&1 | grep -qE "ipAddress=([0-9]{1,3}[\.]){3}[0-9]{1,3}"; do sleep 5; echo "waiting for example-ingress to recieve IP Address"; kubectl get ingress; done
  - echo "$(kubectl get ingress -o jsonpath='{.items[*].status.loadBalancer.ingress[].ip}') hello-world.info" | sudo tee -a /etc/hosts

script:
  - go test -v -coverprofile=coverage.txt -covermode=atomic ./...

after_success:
  - bash <(curl -s https://codecov.io/bash)
